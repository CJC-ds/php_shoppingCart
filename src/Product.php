<?php
    /**
     * Abstract product
     */
    abstract class Product{
        protected $name;
        protected $price;  

        public function getName(){
            return $this->name;
        }

        public function getPrice(){
            return $this->price;
        }

        abstract public function display();
    }

    /**
     * ListedProduct is available item for purchase
     * Extends abstract product.
     * Holds a link to `add` the product to cart.
     */
    class ListedProduct extends Product{
        protected $addLink;
        
        /**
         * Default constructor.
         * Link is generated by class method.
         *
         * @param string $name
         * Name of product
         * @param float $price
         * Price of product
         */
        public function __construct(string $name, 
            float $price){
            $this->name = $name;
            $this->price = $price;
            $this->addLink = $this->generateLink();
        }

        /**
         * generates the add link
         *
         * @return string
         * A link to add product to cart
         */
        private function generateLink(){
            $link = str_replace(' ', '_', $this->name);
            $link = 'add_' . $link;
            return $link;
        }

        /**
         * Getter for add link.
         *
         * @return string
         * Add link
         */
        public function getAddLink(){
            return $this->addLink;
        }

        /**
         * Displays the contents of the ListedProduct
         *
         * @return void
         */
        public function display(){
            echo 
                '<tr>
                    <th>' . $this->name . '</th>
                    <th> '. number_format($this->price, 2, '.', '') .'</th>
                    <th> <a href=?'. $this->addLink .'=true>Add</a></th>
                </tr>';
        }
    }

    /**
     * Product object found in the shopping cart.
     * Additionally tracks quantity, subtotal, removLink
     * in contrast to the abstract Product.
     */
    class CartProduct extends Product{
        protected $quantity;
        protected $subtotal;
        protected $removeLink;

        /**
         * Default constructor
         *
         * @param string $name
         * Product name
         * @param float $price
         * Product price
         * @param integer $quantity
         * Quantity of product in cart
         */
        public function __construct(string $name, 
            float $price, int $quantity){
            $this->name = $name;
            $this->price = $price;
            $this->quantity = $quantity;
            $this->subtotal = $this->computeSubtotal();
            $this->removeLink = $this->generateLink();
        }

        /**
         * Generates a removal link
         *
         * @return string
         * removal link
         */
        private function generateLink(){
            $link = str_replace(' ', '_', $this->name);
            $link = 'remove_' . $link;
            return $link;
        }

        /**
         * Computes the subtotal of a product
         * in the cart.
         *
         * @return float
         * subtotal of product in cart.
         */
        private function computeSubtotal(){
            return ($this->price * floatval($this->quantity));
        }

        /**
         * Getter for subtotal
         *
         * @return float
         * subtotal
         */
        public function getSubtotal(){
            return $this->subtotal;
        }

        /**
         * Getter for remove link
         *
         * @return string
         * remove link.
         */
        public function getRemoveLink(){
            return $this->removeLink;
        }

        /**
         * Increments the product quantity by 1.
         *
         * @return void
         */
        public function increaseQuantity(){
            $this->quantity += 1;
            $this->subtotal = $this->computeSubtotal();
        }

        /**
         * Decrements the product quantity by 1.
         *
         * @return void
         */
        public function decreaseQuantity(){
            $this->quantity -= 1;
            $this->subtotal = $this->computeSubtotal();
        }

        /**
         * Getter for the product quantity in cart.
         *
         * @return void
         */
        public function getQuantity(){
            return $this->quantity;
        }

        /**
         * Displays the cart product in html
         *
         * @return void
         */
        public function display(){
            echo 
                '<tr>
                    <th>' . $this->name . '</th>
                    <th> '. number_format($this->price, 2, '.', '') .'</th>
                    <th> '. $this->quantity . ' </th>
                    <th> '. number_format($this->subtotal, 2, '.', '') . ' </th>
                    <th> <a href=?'. $this->removeLink .'=true>Remove</a></th>
                </tr>';
        }
    }
?>